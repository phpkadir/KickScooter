// #INDEX# ======================================================================================================
// Title .........: framework для упрощеной работы с командами.
// Arch ..........: GD32F130C8C6
// Author ........: GreenBytes ( https://vk.com/greenbytes )
// Version .......: 1.0.0.0
// ==============================================================================================================

#ifndef FRAMEWORK_H
	
	#define FRAMEWORK_H

	#include "gd32f1x0.h"
	#include "../define.h"

	// Константы
	// Типы вирутальных пинов
	// Входной цифровой пин
	# define INPUT												GPIO_MODE_INPUT
	// Выходной цифровой пин
	# define OUTPUT												GPIO_MODE_OUTPUT
	// Входной аналоговый пин
	# define ANALOG												GPIO_MODE_ANALOG
	
	// Управление цифровыми выходами
	// Низкий уровень сигнала
	# define LOW													RESET
	// Высокий уровень сигнала
	# define HIGH													SET
	// Низкий уровень сигнала
	# define OFF													RESET
	// Высокий уровень сигнала
	# define ON														SET
	
	// Зглушка для процедур
	# define NULL													0x00


	// Таблица виртуальных пинов
	enum PIN {
		PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7, PA8, PA9, PA10, PA11, PA12, PA13, PA14, PA15,
		PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7, PB8, PB9, PB10, PB11, PB12, PB13, PB14, PB15,
		PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10, PC11, PC12, PC13, PC14, PC15,
		PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7, PD8, PD9, PD10, PD11, PD12, PD13, PD14, PD15,
		PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7, PF8, PF9, PF10, PF11, PF12, PF13, PF14, PF15
	};
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Номер порта по виртулаьному пину
	// Argument.......: 
	//      uint8_t PIN									= Виртуальный номер пина МК
	// ------------------------------------------------------------
	uint32_t getPort(uint8_t PIN);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Номер пина по виртуальному пину
	// Argument.......: 
	//      uint8_t PIN									= Виртуальный номер пина МК
	// ------------------------------------------------------------
	uint32_t getPin(uint8_t PIN);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Канал АЦП по виртуальному пину
	// Argument.......: 
	//      uint8_t PIN									= Виртуальный номер пина МК
	// ------------------------------------------------------------
	uint8_t getChannel(uint8_t PIN);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Установка типа порта
	// Argument.......: 
	//      uint8_t PIN									= Виртуальный номер пина МК
	//			uint32_t TYPE								= Тип порта (см. ф. framefork.h)
	//					INPUT										= Входной цифровой пин
	//					OUTPUT									= Выходной цифровой пин
	//					ANALOG									= Входной аналоговый пин
	//			uint32_t MODE								= Режим выходного пина
	// ------------------------------------------------------------
	void pinMode(uint8_t PIN, uint32_t TYPE, uint32_t MODE);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Управление цифровым виртуальным пином
	// Argument.......: 
	//      uint8_t PIN									= Виртуальный номер пина МК
	//			FlagStatus fSTATUS					= Статус управления (см. ф. framefork.h)
	//					LOW											= Низкий уровень
	//					HIGH										= Высокий уровень
	// ------------------------------------------------------------
	void digitalWrite(uint8_t PIN, FlagStatus fSTATUS);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Чтение цифрового виртуального пина
	// Argument.......: 
	//      uint8_t PIN									= Виртуальный номер пина МК
	// ------------------------------------------------------------
	FlagStatus digitalRead(uint8_t PIN);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Чтение аналогового виртуального пина
	// Argument.......: 
	//      uint8_t PIN									= Виртуальный номер пина МК
	// ------------------------------------------------------------
	uint16_t analogRead(uint8_t PIN);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Возвращает количество миллисекунд с момента начала выполнения текущей программы
	// Argument.......: Нет
	// ------------------------------------------------------------
	uint32_t millis(void);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Останавливает выполнение программы на заданное в параметре количество миллисекунд
	// Argument.......: 
	//      uint32_t dlyTicks						= Колличество миллисекунд паузы программы
	// ------------------------------------------------------------
	void delay(uint32_t dlyTicks);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Инициализация framework'а и двигателя bldc
	// Argument.......: Нет
	// ------------------------------------------------------------
	void fw_init(void);
	
	// #FRAMEWORK# ------------------------------------------------
	// Description....: Инициализация сторжевого таймера
	// Argument.......: Нет
	// ------------------------------------------------------------
	ErrStatus wd_init(void);
	
	void SysTick_Handler(void);
	void DMA_Channel0_IRQHandler(void);
#endif
